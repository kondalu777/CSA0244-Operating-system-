#define NUM_BLOCKS 16

#define INODE_BLOCKS 8

#define MIN_FILE_SIZE 1

// Function to check if the given blocks are free

bool are_blocks_free(bool blocks[], int start_block, int num_blocks) {

    for (int i = start_block; i < start_block + num_blocks; i++) {

        if (blocks[i]) {

            return false;

        }

    }

    return true;

}

// Function to allocate blocks to a file

void allocate_blocks(bool blocks[], int start_block, int num_blocks) {

    for (int i = start_block; i < start_block + num_blocks; i++) {

        blocks[i] = true;

    }

}

int main() {

    bool blocks[NUM_BLOCKS] = { false };

    // Initialize iNodes blocks as allocated

    for (int i = 0; i < INODE_BLOCKS; i++) {

        blocks[i] = true;

    }

    int start_block, num_blocks;

    printf("Enter the starting block for the file: ");

    scanf("%d", &start_block);

    printf("Enter the number of blocks required for the file: ");

    scanf("%d", &num_blocks);

    // Check if start block and contiguous blocks are free

    if (start_block >= 0 && start_block < NUM_BLOCKS && start_block + num_blocks <= NUM_BLOCKS) {

        if (are_blocks_free(blocks, start_block, num_blocks)) {

            // Allocate blocks to the file

            allocate_blocks(blocks, start_block, num_blocks);

            printf("Blocks allocated to the file: %d to %d\n", start_block, start_block + num_blocks - 1);

        } else {

            printf("Blocks are not free\n");

        }

    } else {

        printf("Invalid start block or number of blocks\n");

    }

    return 0;

}
